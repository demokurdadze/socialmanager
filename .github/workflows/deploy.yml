name: Django FTP Deploy to socialmanager.ge

on:
  push:
    branches:
      - main # Or 'master', or your specific production branch

jobs:
  deploy:
    name: Deploy Django App to FTP Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13' # Your project's Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install Django explicitly
          pip install django
          # Install from requirements.txt if it exists
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          # If requirements.txt is in the Django directory
          elif [ -f social_manager/social_manager/requirements.txt ]; then
            pip install -r social_manager/social_manager/requirements.txt
          # Fallback - just install Django
          else
            echo "No requirements.txt found, installing Django only"
          fi
          # Verify Django installation
          python -c "import django; print(f'Django version: {django.__version__}')"

      # Debug directory structure
      - name: Debug directory structure
        run: |
          pwd
          ls -la
          echo "Repository structure:"
          find . -type f -name "manage.py" | sort
          
          # Debug settings location
          echo "Looking for settings files:"
          find . -name "settings.py" | sort
          find . -name "settings" -type d | sort

      # Path problem fix: Explicitly find and use manage.py
      - name: Collect static files
        run: |
          # Find the manage.py file
          MANAGE_PY_PATH=$(find . -type f -name "manage.py" | head -n 1)
          if [ -z "$MANAGE_PY_PATH" ]; then
            echo "ERROR: manage.py not found in repository"
            exit 1
          fi
          
          echo "Found manage.py at: $MANAGE_PY_PATH"
          DJANGO_DIR=$(dirname "$MANAGE_PY_PATH")
          echo "Django directory is: $DJANGO_DIR"
          
          # Save the Django directory for later steps
          echo "DJANGO_DIR=$DJANGO_DIR" >> $GITHUB_ENV
          
          # Change to the directory containing manage.py
          cd "$DJANGO_DIR"
          
          # Get the directory name (this should be 'social_manager')
          DIR_NAME=$(basename "$(pwd)")
          
          # Look for settings.py in current dir and parent dirs
          if [ -f "settings.py" ]; then
            # settings.py is in the current directory
            export DJANGO_SETTINGS_MODULE=settings
          elif [ -f "$DIR_NAME/settings.py" ]; then
            # settings.py is in a subdirectory with the same name
            export DJANGO_SETTINGS_MODULE=$DIR_NAME.settings
          elif [ -d "$DIR_NAME" ]; then
            # Try to find settings.py in subdirectories
            export PYTHONPATH=$PYTHONPATH:$(pwd)
            export DJANGO_SETTINGS_MODULE=$DIR_NAME.settings
          else
            # Fall back to most common Django pattern
            export PYTHONPATH=$PYTHONPATH:$(pwd)/..
            export DJANGO_SETTINGS_MODULE=$DIR_NAME.settings
          fi
          
          echo "Using settings module: $DJANGO_SETTINGS_MODULE"
          echo "Python path: $PYTHONPATH"
          
          # Run collectstatic
          python manage.py collectstatic --noinput --clear
        # Add env vars if needed
        # env:
        #   DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        #   DEBUG: "False"

      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          protocol: ftp
          # This will use the appropriate directory where manage.py is found
          local-dir: ${{ env.DJANGO_DIR || './' }}
          # Adjust the remote directory path to match your server structure
          remote-dir: /home/socialma/repositories/social_manager/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            .github/**
            README.md
            .gitignore
            venv/
            .venv/
            env/
            *.pyc
            __pycache__/
            *.sqlite3
            .env
            local_settings.py
